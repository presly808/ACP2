1. Theoretical material
    java.util.concurrent.*;
        class (Lock, Condition)
        ArrayBlockingQueue, LinkedBlockingQueue
    class Properties,
    patterns (ProducerConsumer, Builder)
    volatile in java
    SQL - http://www.w3schools.com/sql/
    Relation model of db
    Normalization of Data Bases
    Transaction in DB
    JDBC(Connection, Statement, ResultSet)


2. Второе задание:

   Сделать "магазин ноутбуков" используя базу данных.
                              Написать DAO для классов
   Приложение должно предоставлять меню следующих функций:

   	1. Задавать новые типы, удалять следующие элементы:
   		- модель (id, фирма изготовитель, модель)
   		- процессор (id, изготовитель, тактовая частота)
   		- винчестер (id, изготовитель, объем в мегабайтах)
   		- память (id, изготовитель, объем)
   		- видеокарта (id, изготовитель, объем памяти)
   		- экран (id, размер)
   	2. Задать новый тип ноутбука. Оператору последовательно предлагается выбрать (модель, процессор, винчестер, память, видеокарта, экран)
   	3. Принять на склад указанное количество единиц определенного типа ноутбуков (указывается номер партии, тип, цена, дата).
   	4. Списать указанное кол-во единиц определенного типа ноутбуков.
   	5. Выводить отчет об остатках отдельно по изготовителю, объему оперативной памяти, размеру экрана, кол-ву на складе.
   	6. Выводить отчет о списании за указанный период. В отчет входит: номер партии, тип, цена, дата приема.

   Третье задание:

   Добавить в приложение "магазин ноутбуков", следующие функции:
   	1. Оформить нового покупателя (id, фамилия, имя, отчество, телефон, объем покупок)
   	2. Оформить нового продавца (id, фамилия, имя, отчество, объем продаж, зарплата)
   	3. Уволить продавца
   	4. Продать ноутбук/ноутбуки
   	5. Вывести отчет о продажах за период (дата, покупатель, продавец, сумма)

   Четвертое задание.

   Написать систему нагрузочного тестирования схемы базы данных.
     В несколько потоков, несколько раз, кол-во раз и потоков здает пользователь. Каждый поток несколько раз выполняет транзакцию,
     в которой берет строку, считывает значение одного поля увеличивает на определенное значение, сохраняет, затем опять считывает
     и уменьшает на то же значение. Все потоки работают с одной строкой и одним полем, но у каждого потока разное значение изменения.
     Перед выполнением и после выполнения вывести на экран содержимое изменяемого поля. Сначала сделайте задание без синхронизации,
     затем с синхронизацией. Каждый поток открывает свое соединение с базой.
